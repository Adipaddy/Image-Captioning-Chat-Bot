/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/operationResultsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a OperationResults. */
var OperationResults = /** @class */ (function () {
    /**
     * Create a OperationResults.
     * @param {AzureBotServiceContext} client Reference to the service client.
     */
    function OperationResults(client) {
        this.client = client;
    }
    /**
     * Get the operation result for a long running operation.
     * @param operationResultId The ID of the operation result to get.
     * @param [options] The optional parameters
     * @returns Promise<Models.OperationResultsGetResponse>
     */
    OperationResults.prototype.get = function (operationResultId, options) {
        return this.beginGet(operationResultId, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Get the operation result for a long running operation.
     * @param operationResultId The ID of the operation result to get.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    OperationResults.prototype.beginGet = function (operationResultId, options) {
        return this.client.sendLRORequest({
            operationResultId: operationResultId,
            options: options
        }, beginGetOperationSpec, options);
    };
    return OperationResults;
}());
export { OperationResults };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var beginGetOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.BotService/operationresults/{operationResultId}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.operationResultId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.OperationResultsDescription
        },
        202: {},
        default: {
            bodyMapper: Mappers.ErrorModel
        }
    },
    serializer: serializer
};
//# sourceMappingURL=operationResults.js.map